// Generated by CoffeeScript 2.7.0
var DEBUG, _example_sp, clear_selection, converter, get_selection, highlight_text_occurrence, http, save_potential_point, unescape_html;

bus.libs.react17.coffreact();

bus.state['markdown'] = '';

bus.state['selection'] = '';

bus.state['saved_points'] = [];

// sp.text is the point text
// sp.selection.text is the text that was highlighted to create the point
_example_sp = {
  text: 'how does it know which DNS server to check/the IP of the DNS server?',
  selection: {
    top: 133.8125,
    text: 'how does it know which DNS server to check/the IP of the DNS server?'
  }
};

DEBUG = true;

if (DEBUG) {
  bus.state['saved_points'].push(_example_sp);
}

http = new XMLHttpRequest();

http.open('GET', 'data/tryna make a website.md');

http.send();

http.onloadend = function() {
  return bus.state['markdown'] = http.responseText;
};

showdown.setFlavor('github');

converter = new showdown.Converter();

unescape_html = function(html) {
  return {
    dangerouslySetInnerHTML: {
      __html: html
    }
  };
};

dom.BODY = function() {
  var sp;
  return DIV({}, {
    display: 'flex'
  }, DIV({}, {
    flex: '3 1 400px',
    padding: '10px',
    border: '1px solid green'
  }, unescape_html(converter.makeHtml(bus.state['markdown']))), DIV({}, {
    flex: '1 2 200px',
    padding: '10px',
    border: '1px solid red'
  }, H2('points'), POTENTIAL_POINT({
    selection: bus.state['selection']
  }), (function() {
    var i, len, ref, results;
    ref = bus.state['saved_points'];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      sp = ref[i];
      results.push(SAVED_POINT({
        saved_point: sp,
        key: `sp:${sp.text}`
      }));
    }
    return results;
  })()));
};

dom.POTENTIAL_POINT = function(selection) {
  if (selection.text) {
    BR();
    return DIV({}, {
      position: 'absolute',
      top: selection.top + 'px',
      border: '1px dashed blue'
    }, selection.text, BR(), BUTTON({}, {
      border: '0px',
      onClick: function() {
        save_potential_point(selection);
        return clear_selection();
      }
    }, 'make point☝️'));
  } else {
    return null;
  }
};

dom.SAVED_POINT = function(saved_point) {
  return DIV({}, {
    position: 'absolute',
    top: saved_point.selection.top + 'px'
  }, saved_point.text);
};

get_selection = function() {
  var rel, s;
  s = window.getSelection && window.getSelection();
  if (s && (s.anchorNode != null)) {
    rel = document.body.parentNode.getBoundingClientRect();
    return {
      top: s.getRangeAt(0).getBoundingClientRect().top - rel.top,
      text: s.toString()
    };
  } else {
    return {
      top: 0,
      text: ''
    };
  }
};

clear_selection = function() {
  if (window.getSelection) {
    window.getSelection().removeAllRanges();
  }
  return bus.state['selection'] = get_selection();
};

highlight_text_occurrence = function(text) {
  return null;
};

save_potential_point = function(selection) {
  return bus.state['saved_points'].push({
    text: selection.text,
    selection: {
      text: selection.text,
      top: selection.top
    }
  });
};

document.onmouseup = function() {
  return bus.state['selection'] = get_selection();
};
